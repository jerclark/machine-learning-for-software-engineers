>>> 
>>> 
>>> 
>>> 
>>> import numpy as np
>>> import pandas as pd
>>> s = pd.Series(data, index=index)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'data' is not defined
>>> s = pd.Series(np.random.randn(5), index=["mila", "jeremy", "molly", "theo", "gaby"]))
  File "<stdin>", line 1
    s = pd.Series(np.random.randn(5), index=["mila", "jeremy", "molly", "theo", "gaby"]))
                                                                                        ^
SyntaxError: invalid syntax
>>> s = pd.Series(np.random.randn(5), index=["mila", "jeremy", "molly", "theo", "gaby"])
>>> s
mila      0.354312
jeremy   -0.896341
molly     0.280082
theo     -0.660382
gaby      2.471715
dtype: float64
>>> s
mila      0.354312
jeremy   -0.896341
molly     0.280082
theo     -0.660382
gaby      2.471715
dtype: float64
>>> s
mila      0.354312
jeremy   -0.896341
molly     0.280082
theo     -0.660382
gaby      2.471715
dtype: float64
>>> s
mila      0.354312
jeremy   -0.896341
molly     0.280082
theo     -0.660382
gaby      2.471715
dtype: float64
>>> s
mila      0.354312
jeremy   -0.896341
molly     0.280082
theo     -0.660382
gaby      2.471715
dtype: float64
>>> s.index
Index([u'mila', u'jeremy', u'molly', u'theo', u'gaby'], dtype='object')
>>> pd.Series(np.randon.randn(10)
... )
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'module' object has no attribute 'randon'
>>> pd.Series(np.random.randn(10)
... )
0   -1.788284
1    0.660160
2    1.020571
3   -0.247217
4    1.254619
5    0.508917
6   -1.336934
7    0.154986
8    0.954597
9   -1.262644
dtype: float64
>>> s = pd.Series({"jeremy":40, "molly":41, "mila":6, "theo":3})
>>> s
jeremy    40
mila       6
molly     41
theo       3
dtype: int64
>>> s = pd.Series(1)
>>> s
0    1
dtype: int64
>>> s = pd.Series(1, [1,2,3,4,5])
>>> s
1    1
2    1
3    1
4    1
5    1
dtype: int64
>>> s
1    1
2    1
3    1
4    1
5    1
dtype: int64
>>> s = pd.Series({"jeremy":40, "molly":41, "mila":6, "theo":3})
>>> s[1:]
mila      6
molly    41
theo      3
dtype: int64
>>> s
jeremy    40
mila       6
molly     41
theo       3
dtype: int64
>>> s[0:2]
jeremy    40
mila       6
dtype: int64
>>> s[:2]
jeremy    40
mila       6
dtype: int64
>>> s[s > 20]
jeremy    40
molly     41
dtype: int64
>>> np.exp(s)
jeremy    2.353853e+17
mila      4.034288e+02
molly     6.398435e+17
theo      2.008554e+01
dtype: float64
>>> s['jeremy']
40
>>> s[
... 'molly']
41
>>> s['mila'] = 7
>>> s
jeremy    40
mila       7
molly     41
theo       3
dtype: int64
>>> 'e' in s
False
>>> 'jeremy' in s
True
>>> 50 in s
False
>>> 40 in s
False
>>> s.get('terd')
>>> s
jeremy    40
mila       7
molly     41
theo       3
dtype: int64
>>> s + s
jeremy    80
mila      14
molly     82
theo       6
dtype: int64
>>> s * s
jeremy    1600
mila        49
molly     1681
theo         9
dtype: int64
>>> s ** .5
jeremy    6.324555
mila      2.645751
molly     6.403124
theo      1.732051
dtype: float64
>>> s
jeremy    40
mila       7
molly     41
theo       3
dtype: int64
>>> s[s > 20] + s[s < 41]
jeremy    80.0
mila       NaN
molly      NaN
theo       NaN
dtype: float64
>>> t = pd.Series({a:1, b:2})
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unhashable type: 'numpy.ndarray'
>>> t = pd.Series([1,2], index=[a,b])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'b' is not defined
>>> t = pd.Series([1,2], index=["a","b"])
>>> u = pd.Series([1,2], index=["c","d"])
>>> t + u
a   NaN
b   NaN
c   NaN
d   NaN
dtype: float64
>>> u = pd.Series([1,2], index=["c","d"], name='terd')
>>> terd
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'terd' is not defined
>>> u
c    1
d    2
Name: terd, dtype: int64
>>> u.Name
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/Users/jerclark/anaconda2/lib/python2.7/site-packages/pandas/core/generic.py", line 2672, in __getattr__
    return object.__getattribute__(self, name)
AttributeError: 'Series' object has no attribute 'Name'
>>> u.name
'terd'
>>> 
>>> 
>>> t.name = 'terd'
>>> u.name = 'nerd'
>>> d = {t.name: t, u.name: u}
>>> d
{'terd': a    1
b    2
Name: terd, dtype: int64, 'nerd': c    1
d    2
Name: nerd, dtype: int64}
>>> df = pd.DataFrame(d)
>>> df
   nerd  terd
a   NaN   1.0
b   NaN   2.0
c   1.0   NaN
d   2.0   NaN
>>> df.index
Index([u'a', u'b', u'c', u'd'], dtype='object')
>>> df.columns
Index([u'nerd', u'terd'], dtype='object')
>>> df['nerd']
a    NaN
b    NaN
c    1.0
d    2.0
Name: nerd, dtype: float64
>>> df['terd']
a    1.0
b    2.0
c    NaN
d    NaN
Name: terd, dtype: float64
>>> df['terdnerd'] = df['terd'] * df['nerd']
>>> df['terdnerd']
a   NaN
b   NaN
c   NaN
d   NaN
Name: terdnerd, dtype: float64
>>> df
   nerd  terd  terdnerd
a   NaN   1.0       NaN
b   NaN   2.0       NaN
c   1.0   NaN       NaN
d   2.0   NaN       NaN
>>> df.pop('terdnerd')
a   NaN
b   NaN
c   NaN
d   NaN
Name: terdnerd, dtype: float64
>>> df
   nerd  terd
a   NaN   1.0
b   NaN   2.0
c   1.0   NaN
d   2.0   NaN
>>> df['terdnerd'] = 1.5
>>> df
   nerd  terd  terdnerd
a   NaN   1.0       1.5
b   NaN   2.0       1.5
c   1.0   NaN       1.5
d   2.0   NaN       1.5
>>> df[df == NaN]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'NaN' is not defined
>>> df[df == NaN]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'NaN' is not defined
>>> df[df == 'NaN']
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/Users/jerclark/anaconda2/lib/python2.7/site-packages/pandas/core/ops.py", line 1184, in f
    res = self._combine_const(other, func, raise_on_error=False)
  File "/Users/jerclark/anaconda2/lib/python2.7/site-packages/pandas/core/frame.py", line 3555, in _combine_const
    raise_on_error=raise_on_error)
  File "/Users/jerclark/anaconda2/lib/python2.7/site-packages/pandas/core/internals.py", line 2911, in eval
    return self.apply('eval', **kwargs)
  File "/Users/jerclark/anaconda2/lib/python2.7/site-packages/pandas/core/internals.py", line 2890, in apply
    applied = getattr(b, f)(**kwargs)
  File "/Users/jerclark/anaconda2/lib/python2.7/site-packages/pandas/core/internals.py", line 1153, in eval
    repr(other))
TypeError: Could not compare ['NaN'] with block values
>>> df[df > 0]]
  File "<stdin>", line 1
    df[df > 0]]
              ^
SyntaxError: invalid syntax
>>> df[df > 0]
   nerd  terd  terdnerd
a   NaN   1.0       1.5
b   NaN   2.0       1.5
c   1.0   NaN       1.5
d   2.0   NaN       1.5
>>> df[df == 1.5
... ]
   nerd  terd  terdnerd
a   NaN   NaN       1.5
b   NaN   NaN       1.5
c   NaN   NaN       1.5
d   NaN   NaN       1.5
>>> df[df == 1.5] = 2.0
>>> df
   nerd  terd  terdnerd
a   NaN   1.0       2.0
b   NaN   2.0       2.0
c   1.0   NaN       2.0
d   2.0   NaN       2.0
>>> df.head()
   nerd  terd  terdnerd
a   NaN   1.0       2.0
b   NaN   2.0       2.0
c   1.0   NaN       2.0
d   2.0   NaN       2.0
>>> df.assign('supertn' = df['terd'] * df['nerd'])
  File "<stdin>", line 1
SyntaxError: keyword can't be an expression
>>> df.assign('supertn' = df['terd'] * df['nerd']).head()
  File "<stdin>", line 1
SyntaxError: keyword can't be an expression
>>> (df.assign('supertn' = df['terd'] * df['nerd']).head())
  File "<stdin>", line 1
SyntaxError: keyword can't be an expression
>>> (df.assign(df['supertn'] = df['terd'] * df['nerd']).head())
  File "<stdin>", line 1
SyntaxError: keyword can't be an expression
>>> df.assign(df['supertn'] = df['terd'] * df['nerd'])
  File "<stdin>", line 1
SyntaxError: keyword can't be an expression
>>> (df.assign(df['supertn'] = df['terd'] * df['nerd']).head())
  File "<stdin>", line 1
SyntaxError: keyword can't be an expression
>>> (df.assign(supertn = df['terd'] * df['nerd']).head())
   nerd  terd  terdnerd  supertn
a   NaN   1.0       2.0      NaN
b   NaN   2.0       2.0      NaN
c   1.0   NaN       2.0      NaN
d   2.0   NaN       2.0      NaN
>>> 
