octave:139> A
A =

   1   2
   3   4
   5   6

octave:140> B
B =

   11   12
   13   14
   15   16

octave:141> C
C =

    1    2
    3    4
    5    6
   11   12
   13   14
   15   16

octave:142> C = [1 1;2 2]
C =

   1   1
   2   2

octave:143> A*C
ans =

    5    5
   11   11
   17   17

octave:144> A .* B
ans =

   11   24
   39   56
   75   96

octave:145> A
A =

   1   2
   3   4
   5   6

octave:146> B
B =

   11   12
   13   14
   15   16

octave:147> A*B
error: operator *: nonconformant arguments (op1 is 3x2, op2 is 3x2)
octave:147> A
A =

   1   2
   3   4
   5   6

octave:148> size A
ans =

   1   1

octave:149> size B
ans =

   1   1

octave:150> size(A)
ans =

   3   2

octave:151> size(B)
ans =

   3   2

octave:152> A*
parse error:

  syntax error

>>> A*
     ^

octave:152> A*B
error: operator *: nonconformant arguments (op1 is 3x2, op2 is 3x2)
octave:152> A .* B
ans =

   11   24
   39   56
   75   96

octave:153> A.*B
ans =

   11   24
   39   56
   75   96

octave:154> % Use .% notiation to do an elementwise multiplication.
octave:154> % Generall "." means element wise
octave:154> A .^ B
ans =

   1.0000e+00   4.0960e+03
   1.5943e+06   2.6844e+08
   3.0518e+10   2.8211e+12

octave:155> 1 ./ A
ans =

   1.00000   0.50000
   0.33333   0.25000
   0.20000   0.16667

octave:156> log(v)
ans =

   1.6292   1.5892   1.5476   1.5261   1.6094   1.6864   1.5261   1.6094   1.4816   1.5892

octave:157> epx(v)
error: 'epx' undefined near line 1 column 1
octave:157> exp(v)
ans =

   164.022   134.290   109.947    99.484   148.413   221.406    99.484   148.413    81.451   134.290

octave:158> abs([-1; -2; ;3])
ans =

   1
   2
   3

octave:159> v
v =

   5.1000   4.9000   4.7000   4.6000   5.0000   5.4000   4.6000   5.0000   4.4000   4.9000

octave:160> v = [1 2 3]
v =

   1   2   3

octave:161> v + ones(length(v), 1)
warning: operator +: automatic broadcasting operation applied
ans =

   2   3   4
   2   3   4
   2   3   4

octave:162> v = [1; 2; 3]
v =

   1
   2
   3

octave:163> v = v + 1
v =

   2
   3
   4

octave:164> A
A =

   1   2
   3   4
   5   6

octave:165> A'
ans =

   1   3   5
   2   4   6

octave:166> A'
ans =

   1   3   5
   2   4   6

octave:167> A'
ans =

   1   3   5
   2   4   6

octave:168> (A')'
ans =

   1   2
   3   4
   5   6

octave:169> a = [1 20 150]
a =

     1    20   150

octave:170> max(a)
ans =  150
octave:171> A
A =

   1   2
   3   4
   5   6

octave:172> max(A)
ans =

   5   6

octave:173> % max on a matrix does a columwise max
octave:173> a
a =

     1    20   150

octave:174> a < 20
ans =

   1   0   0

octave:175> find(a < 20)
ans =  1
octave:176> % You can do min max, and finds in a matri
octave:176> A = magic(3)
A =

   8   1   6
   3   5   7
   4   9   2

octave:177> % Magic square - all rows columsna dn diagonals equal the same thing.
octave:177> [r, c] = find(A < 20)
r =

   1
   2
   3
   1
   2
   3
   1
   2
   3

c =

   1
   1
   1
   2
   2
   2
   3
   3
   3

octave:178> A
A =

   8   1   6
   3   5   7
   4   9   2

octave:179> v
v =

   2
   3
   4

octave:180> sum v
ans =  118
octave:181> sum(v)
ans =  9
octave:182> prod(v)
ans =  24
octave:183> floor(v)
ans =

   2
   3
   4

octave:184> celi(v)
error: 'celi' undefined near line 1 column 1
octave:184> ceil(v)
ans =

   2
   3
   4

octave:185> A
A =

   8   1   6
   3   5   7
   4   9   2

octave:186> max(A)
ans =

   8   9   7

octave:187> % Standard max is columnwise
octave:187> max(A)
ans =

   8   9   7

octave:188> max(A,[],1)
ans =

   8   9   7

octave:189> max(A,[],2)
ans =

   8
   7
   9

octave:190> %use max(A,[],2) to get a rowwise max
octave:190> % To get the max value in a matrix...
octave:190> max(max(A))
ans =  9
octave:191> % That will get the max from each column, then the max of those.
octave:191> % OR
octave:191> max(A(:))
ans =  9
octave:192> % That turns a into a column vector and takes the max of that
octave:192> A = magic(9)
A =

   47   58   69   80    1   12   23   34   45
   57   68   79    9   11   22   33   44   46
   67   78    8   10   21   32   43   54   56
   77    7   18   20   31   42   53   55   66
    6   17   19   30   41   52   63   65   76
   16   27   29   40   51   62   64   75    5
   26   28   39   50   61   72   74    4   15
   36   38   49   60   71   73    3   14   25
   37   48   59   70   81    2   13   24   35

octave:193> sum(A,1)
ans =

   369   369   369   369   369   369   369   369   369

octave:194> sum(A,2)
ans =

   369
   369
   369
   369
   369
   369
   369
   369
   369

octave:195> % The second argument to sum indicates columnwise (1) or rowise (2) summation
octave:195> % To sum the diagonal, multiply by the identity matrix then do a sum(sum)
octave:195> sum(sum(A.*eye(9)))
ans =  369
octave:196> A.*eye(9)
ans =

   47    0    0    0    0    0    0    0    0
    0   68    0    0    0    0    0    0    0
    0    0    8    0    0    0    0    0    0
    0    0    0   20    0    0    0    0    0
    0    0    0    0   41    0    0    0    0
    0    0    0    0    0   62    0    0    0
    0    0    0    0    0    0   74    0    0
    0    0    0    0    0    0    0   14    0
    0    0    0    0    0    0    0    0   35

octave:197> sum(A.*eye(9))
ans =

   47   68    8   20   41   62   74   14   35

octave:198> % Use flipud to 'filp' a matrix vertically
octave:198> i = eye(9)
i =

Diagonal Matrix

   1   0   0   0   0   0   0   0   0
   0   1   0   0   0   0   0   0   0
   0   0   1   0   0   0   0   0   0
   0   0   0   1   0   0   0   0   0
   0   0   0   0   1   0   0   0   0
   0   0   0   0   0   1   0   0   0
   0   0   0   0   0   0   1   0   0
   0   0   0   0   0   0   0   1   0
   0   0   0   0   0   0   0   0   1

octave:199> filpud(i)
error: 'filpud' undefined near line 1 column 1
octave:199> flipud(i)
ans =

Permutation Matrix

   0   0   0   0   0   0   0   0   1
   0   0   0   0   0   0   0   1   0
   0   0   0   0   0   0   1   0   0
   0   0   0   0   0   1   0   0   0
   0   0   0   0   1   0   0   0   0
   0   0   0   1   0   0   0   0   0
   0   0   1   0   0   0   0   0   0
   0   1   0   0   0   0   0   0   0
   1   0   0   0   0   0   0   0   0

octave:200> % use pinv() for inverse
octave:200> A
A =

   47   58   69   80    1   12   23   34   45
   57   68   79    9   11   22   33   44   46
   67   78    8   10   21   32   43   54   56
   77    7   18   20   31   42   53   55   66
    6   17   19   30   41   52   63   65   76
   16   27   29   40   51   62   64   75    5
   26   28   39   50   61   72   74    4   15
   36   38   49   60   71   73    3   14   25
   37   48   59   70   81    2   13   24   35

octave:201> A = magic(3)
A =

   8   1   6
   3   5   7
   4   9   2

octave:202> pinv(A)
ans =

   0.147222  -0.144444   0.063889
  -0.061111   0.022222   0.105556
  -0.019444   0.188889  -0.102778

octave:203> A
A =

   8   1   6
   3   5   7
   4   9   2

octave:204> pinv(A)*A
ans =

   1.00000   0.00000  -0.00000
  -0.00000   1.00000   0.00000
   0.00000   0.00000   1.00000

